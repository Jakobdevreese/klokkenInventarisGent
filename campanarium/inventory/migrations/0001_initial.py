# Generated by Django 5.2.3 on 2025-06-14 14:12

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bell',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Naam')),
                ('weight', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Gewicht (kg)')),
                ('height', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Hoogte (cm)')),
                ('diameter', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Diameter (cm)')),
                ('inscription', models.CharField(blank=True, max_length=255, null=True, verbose_name='Inscriptie')),
                ('pitch', models.CharField(blank=True, max_length=20, null=True, verbose_name='Slagtoon')),
                ('installation', models.CharField(blank=True, max_length=255, null=True, verbose_name='Opstelling')),
                ('year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(600), django.core.validators.MaxValueValidator(2100)], verbose_name='Gietjaar')),
                ('function', models.CharField(blank=True, max_length=100, null=True, verbose_name='Functie')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Opmerkingen')),
            ],
            options={
                'verbose_name': 'Klok',
                'verbose_name_plural': 'Klokken',
            },
        ),
        migrations.CreateModel(
            name='Carillon',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('established', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(600), django.core.validators.MaxValueValidator(2100)], verbose_name='Ingebruikname')),
                ('number_of_bells', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(80)], verbose_name='Aantal klokken')),
                ('total_weight', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000.0)], verbose_name='Totaal gewicht (kg)')),
                ('transposition', models.CharField(blank=True, max_length=20, null=True, verbose_name='Transpositie')),
                ('keyboard_standard', models.CharField(blank=True, max_length=20, null=True, verbose_name='Toetsenbord standaard')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Opmerkingen')),
            ],
            options={
                'verbose_name': 'Beiaard',
                'verbose_name_plural': 'Beiaarden',
                'ordering': ['tower__name', 'established'],
            },
        ),
        migrations.CreateModel(
            name='Founder',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Naam')),
                ('alternative_names', models.JSONField(blank=True, default=list, help_text='Lijst van alternatieve namen', null=True, verbose_name='Alternatieve namen')),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Bedrijfsnaam')),
                ('active_period', models.CharField(blank=True, help_text='Bijvoorbeeld: "1850-1900", "ca. 1860", "vroege 19e eeuw", "actief rond 1875"', max_length=100, null=True, verbose_name='Jaren actief')),
                ('geographic_location', models.CharField(blank=True, help_text='Bijvoorbeeld: "Vlaanderen", "Braband", "Nederland",...', max_length=255, null=True, verbose_name='Regio')),
                ('country', models.CharField(blank=True, help_text='Land van oprichting', max_length=255, null=True, verbose_name='Land')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Opmerkingen')),
            ],
            options={
                'verbose_name': 'Gieter',
                'verbose_name_plural': 'Gieters',
                'ordering': ['primary_name'],
            },
        ),
        migrations.CreateModel(
            name='Tower',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Naam')),
                ('building', models.CharField(blank=True, max_length=100, null=True, verbose_name='Kerk of naam gebouw')),
                ('geo_coordinates', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='Klik op de kaart of voer coördinaten in', null=True, srid=4326, verbose_name='Geografische Coördinaten')),
                ('street_address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Straat en huisnummer')),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Postcode')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Stad/Gemeente')),
                ('country', models.CharField(blank=True, default='België', max_length=100, null=True, verbose_name='Land')),
                ('full_address', models.CharField(blank=True, help_text='Automatisch gegenereerd of handmatig ingevoerd', max_length=300, null=True, verbose_name='Volledig adres')),
                ('height', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Hoogte (m)')),
                ('height_bells', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Hoogte klokken (m)')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Opmerkingen')),
                ('contact_info', models.TextField(blank=True, null=True, verbose_name='Contacten')),
            ],
            options={
                'verbose_name': 'Toren',
                'verbose_name_plural': 'Torens',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Naam')),
                ('file', models.FileField(upload_to='', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg', 'svg', 'webp', 'pdf', 'csv'])], verbose_name='Bestand')),
                ('file_type', models.CharField(choices=[('image', 'Image (png, jpg, jpeg, svg, webp)'), ('pdf', 'PDF'), ('csv', 'CSV')], max_length=10, verbose_name='Bestandstype')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Opmerkingen')),
                ('bell', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.bell', verbose_name='Klok')),
                ('carillon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.carillon', verbose_name='Beiaard')),
                ('founder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.founder', verbose_name='Gieter')),
                ('tower', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.tower', verbose_name='Toren')),
            ],
            options={
                'verbose_name': 'Bestand',
                'verbose_name_plural': 'Bestanden',
                'ordering': ['name', 'file_type'],
            },
        ),
        migrations.AddField(
            model_name='carillon',
            name='tower',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.tower', verbose_name='Toren'),
        ),
        migrations.CreateModel(
            name='Carillon_Bell',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Startdatum')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Einddatum')),
                ('relative_pitch', models.CharField(blank=True, max_length=25, null=True)),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Opmerkingen')),
                ('bell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.bell')),
                ('carillon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.carillon')),
            ],
            options={
                'verbose_name': 'Beiaard Klok',
                'verbose_name_plural': 'Beiaarden Klokken',
                'unique_together': {('carillon', 'bell')},
            },
        ),
        migrations.CreateModel(
            name='Bell_Founder',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_work', models.IntegerField(blank=True, help_text='Jaar waarin het werk werd uitgevoerd', null=True, validators=[django.core.validators.MinValueValidator(600), django.core.validators.MaxValueValidator(2100)], verbose_name='Jaar van werken')),
                ('type_of_work', models.CharField(blank=True, help_text='Bijvoorbeeld: "gieten", "reparatie", "hergieten"', max_length=100, null=True, verbose_name='Type van werken')),
                ('is_primary_founder', models.BooleanField(default=False, verbose_name='Is primaire gieter')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Opmerkingen')),
                ('bell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.bell')),
                ('founder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.founder')),
            ],
            options={
                'verbose_name': 'Klok Gieter',
                'verbose_name_plural': 'Klokken Gieters',
                'unique_together': {('bell', 'founder')},
            },
        ),
        migrations.CreateModel(
            name='Bell_Tower',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Startdatum')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Einddatum')),
                ('is_current_location', models.BooleanField(default=False, verbose_name='Huidige locatie')),
                ('installation_details', models.TextField(blank=True, null=True, verbose_name='Installatie details')),
                ('reason_of_movement', models.TextField(blank=True, null=True, verbose_name='Reden van verplaatsing')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Opmerkingen')),
                ('bell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.bell')),
                ('tower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.tower')),
            ],
            options={
                'verbose_name': 'Toren Klok',
                'verbose_name_plural': 'Torens Klokken',
                'unique_together': {('tower', 'bell')},
            },
        ),
    ]
